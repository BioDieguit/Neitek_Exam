<style>
    .bold {
        font-weight: bold;
    }
</style> 

<DxPopup @bind-Visible="@IsVisiblePopUp"
         HeaderText=@Titulo
         CloseOnEscape="false"
         CloseOnOutsideClick="false"
         ShowFooter="true"
         ShowCloseButton="true"
         Closed="OnClosed"
         Width="450">
    <BodyTemplate>
        <div class="d-flex flex-fill pt-1 pb-2">
            @switch (PopIdAccion)
            {
               case "Registrar" or "Modificar":
                    <DxFormLayout CssClass="w-100 p-2">
                        <DxFormLayoutItem Caption="Nombre: " ColSpanXl="12" ColSpanLg="12" ColSpanMd="12" ColSpanSm="12" ColSpanXs="12" Context="EditFormMinContext">
                            <DxTextBox @bind-Text="@TextoAccionPop"
                                       maxlength="80" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
               break;
               case "Eliminar":
                    <p class="m-3"> Que desea elimina el elemento: <span class="bold"> @TextoAccionPop </span></p>
               break;
            }     
        </div>
    </BodyTemplate>
    <FooterContentTemplate>
        @if (Bifurcacion.Equals("Metas"))
        {
            switch (PopIdAccion)
            {
                case "Registrar":
                    <DxButton Text="Aceptar"
                              Click="EnviarMetaRegistrar"
                              RenderStyle="ButtonRenderStyle.Primary" />
                break;
                case "Eliminar":
                    <DxButton Text="Aceptar"
                              Click="MetaEliminar"
                              RenderStyle="ButtonRenderStyle.Primary" />
                break;
                case "Modificar":
                    <DxButton Text="Aceptar"
                              Click="EnviarMetaModificar"
                    RenderStyle="ButtonRenderStyle.Primary" />
                    break;
            }
        }
        else
        {
            switch (PopIdAccion)
            {
                case "Registrar":
                    <DxButton Text="Aceptar"
                              Click="EnviarTareaRegistrar"
                              RenderStyle="ButtonRenderStyle.Primary" />
                    break;
                case "Eliminar":
                    <DxButton Text="Aceptar"
                              Click="TareaEliminar"
                              RenderStyle="ButtonRenderStyle.Primary" />
                    break;
                case "Modificar":
                    <DxButton Text="Aceptar"
                              Click="EnviarTareaModificar"
                              RenderStyle="ButtonRenderStyle.Primary" />
                    break;
            }
        }      
        <DxButton Click="CerraVentana"
                  Text="Cancelar"
                  RenderStyle="ButtonRenderStyle.Secondary" />
    </FooterContentTemplate>
</DxPopup>

@code {
    #region .:| Eventos Registrar|:.
    [Parameter]
    public EventCallback<string> RegistrarNuevaMeta { get; set; }
    [Parameter]
    public EventCallback<string> RegistrarNuevaTarea { get; set; }
    #endregion

    #region .:| Eventos Modificar|:.
    [Parameter]
    public EventCallback<string> ModificarMeta { get; set; }
    [Parameter]
    public EventCallback<string> ModificarTarea { get; set; }
    #endregion

    #region .:| Eventos Eliminar|:.
    [Parameter]
    public EventCallback MetaEliminar { get; set; }
    [Parameter]
    public EventCallback TareaEliminar { get; set; }
    #endregion

    #region .:| Eventos Cerra-Pop|:.
    [Parameter]
    public EventCallback CerraVentana { get; set; }
    [Parameter]
    public EventCallback<PopupClosedEventArgs> OnClosed { get; set; }
    #endregion

    #region .:| Variables |:.
    [Parameter] // Variable para indicar si la Pop-Window es visible o no
    public bool IsVisiblePopUp { get; set; } = false;
    [Parameter] // Variable para indicar que tipo de accion se esta realizando ("Registrar/Modificar/Eliminar") 
    public string PopIdAccion { get; set; }
    [Parameter] // Variable que trae el titulo que tendra la Pop-Window
    public string Titulo { get; set; } 
    [Parameter] // Variable que trae el Texto que se desplegara en la Pop-window dependiendo de que accion se este haciendo ("Registrar/Modificar/Eliminar")
    public string TextoAccionPop { get; set; }
    [Parameter] // Variable que funciona para saber si la Pop pertenece a las Metas o a las Tareas
    public string Bifurcacion { get; set; }
    #endregion


    #region .:| Evento Registrar Meta|:.
    protected async Task EnviarMetaRegistrar()
    {
        await RegistrarNuevaMeta.InvokeAsync(TextoAccionPop);
    }
    #endregion

    #region .:| Evento Modificar Meta|:.
    protected async Task EnviarMetaModificar()
    {
        await ModificarMeta.InvokeAsync(TextoAccionPop);
    }
    #endregion


    #region .:| Evento Registrar Meta|:.
    protected async Task EnviarTareaRegistrar()
    {
        await RegistrarNuevaTarea.InvokeAsync(TextoAccionPop);
    }
    #endregion

    #region .:| Evento Modificar Meta|:.
    protected async Task EnviarTareaModificar()
    {
        await ModificarTarea.InvokeAsync(TextoAccionPop);
    }
    #endregion


    /// <summary>
    ///  Metodo para poder habilitar los eventos del teclado
    /// </summary>
    /// <param name="e"> Evento del teclado</param>
    protected async Task OnKeyUp(KeyboardEventArgs  e) {
        if (e.Key == "Escape")
        {
            await CerraVentana.InvokeAsync();
        }
        if (e.Key == "Enter")
        {
            switch (PopIdAccion)
            {
                case "Registrar":
                    await RegistrarNuevaMeta.InvokeAsync(TextoAccionPop);                  
                break;
                case "Modificar":
                    await ModificarMeta.InvokeAsync(TextoAccionPop);
                break;
                case "Eliminar":
                    await MetaEliminar.InvokeAsync();
                break;
            }
        }
    }
}