<style>
    .bold {
        font-weight: bold;
    }
</style> 


<DxPopup @bind-Visible="@IsVisiblePopUp"
         HeaderText=@Titulo
         CloseOnEscape="false"
         CloseOnOutsideClick="false"
         ShowFooter="true"
         ShowCloseButton="true"
         Closed="OnClosed"
         Width="450">
    <BodyTemplate>
        <div class="d-flex flex-fill pt-1 pb-2">
            @switch (PopIdAccion)
            {
               case "Registrar" or "Modificar":
                    <DxFormLayout CssClass="w-100 p-2">
                        <DxFormLayoutItem Caption="Nombre: " ColSpanXl="12" ColSpanLg="12" ColSpanMd="12" ColSpanSm="12" ColSpanXs="12" Context="EditFormMinContext">
                            <DxTextBox @bind-Text="@TextoAccionPop"
                                       maxlength="80" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
               break;
               case "Eliminar":
                    <p class="m-3"> Que desea elimina el elemento: <span class="bold"> @TextoAccionPop </span></p>
               break;
            }     
        </div>
    </BodyTemplate>
    <FooterContentTemplate>
        @switch (PopIdAccion)
        {
            case "Registrar":
                <DxButton Text="Aceptar"
                          Click="EnviarMetaRegistrar"
                          RenderStyle="ButtonRenderStyle.Primary" />
            break;
            case "Eliminar":
               <DxButton Text="Aceptar"
                          Click="EnviarMetaEliminar"
                          RenderStyle="ButtonRenderStyle.Primary" />
            break;
            case "Modificar":
                <DxButton Text="Aceptar"
                          Click="EnviarMetaModificar"
                          RenderStyle="ButtonRenderStyle.Primary" />
            break;
        }
       
        <DxButton Click="CerraVentana"
                  Text="Cancelar"
                  RenderStyle="ButtonRenderStyle.Secondary" />
    </FooterContentTemplate>
</DxPopup>

@code {
    #region .:| Variables Registrar Meta|:.
    [Parameter]
    public EventCallback<string> RegistrarNuevaMeta { get; set; }
    #endregion

    #region .:| Variables Eliminar Meta|:.
    [Parameter]
    public EventCallback<short> EliminarMeta { get; set; }
    #endregion

    #region .:| Variables Modificar Meta|:.
    [Parameter]
    public EventCallback<string> ModificarMeta { get; set; }
    #endregion


    [Parameter]
    public EventCallback CerraVentana { get; set; }
    [Parameter]
    public bool IsVisiblePopUp { get; set; } = false;
    [Parameter]
    public string PopIdAccion { get; set; }
    [Parameter]
    public string Titulo { get; set; }
    [Parameter]
    public string Mensaje { get; set; }      
    [Parameter]
    public string TextoAccionPop { get; set; }
    [Parameter]
    public EventCallback<PopupClosedEventArgs> OnClosed { get; set; } 


    #region .:| Evento Registrar Meta|:.
    protected async Task EnviarMetaRegistrar()
    {
        await RegistrarNuevaMeta.InvokeAsync(TextoAccionPop);
    }
    #endregion

    #region .:| Evento Eliminar Meta|:.
    protected async Task EnviarMetaEliminar()
    {
        await EliminarMeta.InvokeAsync();
    }
    #endregion

    #region .:| Evento Modificar Meta|:.
    protected async Task EnviarMetaModificar()
    {
        await ModificarMeta.InvokeAsync(TextoAccionPop);
    }
    #endregion



    // protected async Task OnKeyUp(KeyboardEventArgs  e) {
    //     if (e.Key == "Escape")
    //     {
    //         await CerraVentana.InvokeAsync();
    //     }
    //     if (e.Key == "Enter")
    //     {
    //         await OnClickBotonAceptar.InvokeAsync();
    //     }
    //}
}